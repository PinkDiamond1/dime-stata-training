---
title: Cleaning data - Part 1
author: Luiza Andrade and Sushmita Samaddar
---

# What is data cleaning?

The best way to summarize what data cleaning means is through this image

![](img/cleaning.png)

# What is data cleaning?

- Cleaning is about changing the *format* of the data to the format that is the most efficient to store and handle in statistical software and also the easiest for humans to understand
- We are not making changes to the *information* contained in the data set -- this will come later, in *data construction*

# Input: the raw data

- Contains only information originally received during data acquisition
- Raw data files should be stored in the raw data folder [exactly]{style="color: orange"} as they were acquired
  - The raw data files should [never]{style="color: orange"} be edited directly
  - Be mindful of how and where they are stored: they cannot be re-created and nearly always contain confidential data
- If the raw data contains confidential information, it [must be safely stored]{style="color: orange"}

# Output: the cleaned data set

- At the end of this process, you should have a data set that is essentially the same as the one you originally acquired
 - During data cleaning, we will change the [format]{style="color: orange"} of the data
 - We will [not]{style="color: orange"} make significant changes to individual data points
- The main difference between the *raw* and the *clean* data sets lies in how easy it is to understand them and handle them in statistical software
- One clean dataset will be created for each data source

# Setting the stage

To start our session, let's first set up our work environment

**Exercise:**

1. Launch Stata by opening the Stata project `Introduction to Stata.stpr`
2. Open a new do-file
3. Load the `process_raw` data set
  - In case you don't remember this from the last session, you can use the `use` command and the Stata project features to open a data set by typing

# Setting the stage

To start our session, let's first set up our work environment

**Exercise:**

1. Launch Stata by opening the Stata project `Introduction to Stata.stpr`
2. Open a new do-file
3. Load the `process_raw` data set
  - In case you don't remember this from the last session, you can use the `use` command and the Stata project features to open a data set by typing
  
~~~
use "Data/Raw/process_raw.dta", clear
~~~

# Cleaning string variables

What are different ways to identify the string variables in our data set?

# Identifying string variables

What are different ways to identify the string variables in our data set?

- `codebook`
- Variables and Properties window
- Browsing the dataset

# Identifying string variables

```{s}
codebook, compact
```

# Cleaning string variables

```{s}
codebook Entity_county Entity_Naziv Process_Naziv Process_Oznaka PostupakNadmetanja_Naziv_tr TipNadmetanja_Naziv_tr StatusNadmetanja_Naziv_tr VrstaNadmetanja_Naziv_tr TipNabave_Naziv_tr MetodaEvaluacije_tr RokZaDostavuZahtSudj
```

- quite a few variables also have the value "NULL" in them
- we also see a warning about spaces

![](img/trailing-spaces.png)


# Cleaning string variables: `replace`

Replace contents of existing variable

~~~
replace oldvar =exp [if] [in] [, nopromote]
~~~

- Replace works with all types of variables

# Cleaning string variables: `replace`

**Exercise:** replace all 
```{s}
replace Process_Naziv = "" if Process_Naziv == "NULL"
```

- strings between quotes

# Cleaning string variables

```{s}
codebook Entity_county Entity_Naziv Process_Naziv Process_Oznaka PostupakNadmetanja_Naziv_tr TipNadmetanja_Naziv_tr StatusNadmetanja_Naziv_tr VrstaNadmetanja_Naziv_tr TipNabave_Naziv_tr MetodaEvaluacije_tr RokZaDostavuZahtSudj, problems
```

- Humans can tell that a word regardless of cases, spaces and typos, but Stata is not that smar
- Similarly, it may be hard for the human eye to see one extra space, but not for Stata 

# Cleaning string variables

```{s}
tab StatusNadmetanja_Naziv_tr
```

- AGREED and Agreed mean the same thing
- So to "In contracting" and "In contracting "


# Changes cases

~~~
upper(s) 	: capitalize all characters in string s

lower(s)	: make all characters in string s lower case

proper(s)	: capitalize only the first letter of each word in string s
~~~

Note these are *functions*, not *commands*. They cannot be used by themselves, but rather need to be used inside a command.
- h proper()

# Changes cases

```{s}
replace StatusNadmetanja_Naziv_tr = proper(StatusNadmetanja_Naziv_tr)
tab StatusNadmetanja_Naziv_tr
```

# Changes cases

**Exercise**

```{s}
replace StatusNadmetanja_Naziv_tr = upper(StatusNadmetanja_Naziv_tr)
tab StatusNadmetanja_Naziv_tr

replace StatusNadmetanja_Naziv_tr = lower(StatusNadmetanja_Naziv_tr)
tab StatusNadmetanja_Naziv_tr
```

# `strtrim(s)`

~~~
Description:  s without leading and trailing blanks (ASCII space character char(32)); equivalent to strltrim(strrtrim(s))
			 strtrim(" this ") = "this"
~~~

```{s}
replace StatusNadmetanja_Naziv_tr = strtrim(StatusNadmetanja_Naziv_tr)
tab StatusNadmetanja_Naziv_tr
```

# `subinstr(s1,s2,s3,n)`

~~~
Description:  s1, where the first n occurrences in s1 of s2 have been replaced with s3
 			 subinstr("this is the day","is","X",1) = "thX is the day"
			 subinstr("this is the hour","is","X",2) = "thX X the hour"
			 subinstr("this is this","is","X",.) = "thX X thX"
~~~

```{s}
replace RokZaDostavuZahtSudj = subinstr(RokZaDostavuZahtSudj, "NULL", "", .)
codebook RokZaDostavuZahtSudj
```

# Encode variables

-  Each statistical software has optimized the formats it uses to store and handle different types if information
-  The clean data set should contain no string variables, except for

  1.  Proper nouns that are not categories
  2.  Digits with leading zeros or long IDs (over 15 digits)

-  That means categorical string variables must be transformed into labeled variables or factors
-  Check that all categorical variables have value labels

# Encode variables

How do you tell categorical variables from text variables when they don't yet have value labels?

# Encode variables

How do you tell categorical variables from text variables when they don't yet have value labels?

- By the number of different values they take

# Encode variables

Which variables below are categorical?

```{s}
codebook, compact
```

# Encode variables

Which variables below are categorical?

- Entity_county
- PostupakNadmetanja_Naziv_tr
- TipNadmetanja_Naziv_tr
- StatusNadmetanja_Naziv_tr
- VrstaNadmetanja_Naziv_tr
- TipNabave_Naziv_tr
- MetodaEvaluacije_tr

The process of transforming text variables into categorical variables in Stata is called "encoding"

# Encoding variables in Stata

-  In Stata, the best practice is to use `encode` with both the `label` and the `noextend` options

```{s}
codebook StatusNadmetanja_Naziv_tr
encode StatusNadmetanja_Naziv_tr, gen(bid_status)
codebook bid_status
labelbook bid_status
```

# Value labels

**Exercise**

```{s}
encode MetodaEvaluacije_tr, gen(evaluation_method)
tab evaluation_method
labelbook evaluation_method
```

# Value labels

```{s}
label define eval 1 "Lowest price" ///
				  2 "Most economically advantageous tender"
				  
label values evaluation_method eval
tab evaluation_method
```

# Value labels

```{s}
label define evaluation_method 2 "Most economically advantageous tender", modify
```

# Value labels

see help label for more

# Recoding

```{s}
encode TipNadmetanja_Naziv_tr, gen(bidding_type)
codebook bidding_type
```

# Recoding

~~~
recode varlist (erule) [(erule) ...] [if] [in] [, options]
~~~

![](img/recode.png)


# Recoding

~~~
recode bidding_type (4 = 3)
~~~

~~~
replace bidding_type  = 3 if bidding_type == 4
~~~

# Recoding

**Exercise**:

```{s}
recode bidding_type (4 = 3) (5 = 6)
tab bidding_type
```

# Naming files

-  Make sure all output files, datasets and others are clearly and uniquely named
-  It's often desirable to have the names of your data sets and do-files linked, so it is easy to understand which do-files is creating which data set, such as "merge.do" and "merged.dta" or "cleaning.do" and "clean.dta"
-  Do not use _v1, _v2 etc. for any final files. This leads to bugs in do-files that depend on these files when a new versions is added.
-  It's ok to use _v1, _v2 etc. for old versions of files if you [really]{style="color: orange"} need to keep an archive

# Exercise

- Save do-file, call it "cleaning-process"
- Save data, call it "clean-process-data"