---
author:
title: Data Analysis
---

# Data analysis

- Input
  - One or multiple constructed datasets
  
- Steps
  - **Exploratory analysis:** explore, describe and look for patterns in the data
  - **Final data analysis:** create and export polished tables and graphs
  
- Output
  - Excel tables
  - PNG or JPG images
  - Documentation

```{s/}
set scheme s2color
```

  
# Exploratory analysis

- During exploratory analysis, we will explore the data and look for patterns
- At this stage, we are looking to understand the data rather than to present findings
- We will create code, but not necessarily export outputs or spend time making sure graphs and tables are well-presented


# Exploratory analysis: setting the stage

1. Open a new do-file in the do-file editor
2. Load the dataset that you want to explore

```{s}
use "../DataWork/Data/Final/final_process.dta", clear
```

Note that:

  - We have created multiple constructed datasets, with different levels of observation
  - We will explore each of them separately
  - If you want to explore variables that are not in the dataset yet, go back to construction and create them
 
 
# Exploratory analysis: useful commands

- `codebook`: to describe the dataset and individual variables
- `summarize`: to see descriptive statistics for continuous variables
- `tabulate`: to create frequency tables
- `histogram`: to create a histograms
- `kdensity`: to create a density graph for continuous variables
- `scatter`: to quickly visualize the relationship between two variables


# Exploratory analysis: `codebook`

[ ]{style="font-size:10%"}

~~~
codebook [varlist] [if] [in] [, options]
~~~

- Explore the entire dataset:

~~~
codebook
~~~

- Explore selected variables:

~~~
codebook varlist
~~~


# Exploratory analysis: `codebook` 

[ ]{style="font-size:10%"}

~~~
codebook [varlist] [if] [in] [, options]
~~~

Explore the specific variables:

```{s}
codebook process_value process_type
```


# Exploratory analysis: `summarize`

[ ]{style="font-size:10%"}

~~~
summarize [varlist] [if] [in] [weight] [, options]
~~~ 

**Exercise:** Use `summarize` to explore the variables `process_value` and `process_type`


# Exploratory analysis: `summarize` 

[ ]{style="font-size:10%"}

~~~
summarize [varlist] [if] [in] [weight] [, options]
~~~ 

**Exercise:** Use `summarize` to explore the variables `process_value` and `process_type`

```{s}
summarize process_value process_type
```


# Exploratory analysis: `summarize` 

[ ]{style="font-size:10%"}

~~~
summarize [varlist] [if] [in] [weight] [, options]
~~~ 

- Using the option `detail` will include more information about the distribution

```{s}
summarize process_value, detail
```


# Exploratory analysis: tabulate one way

[ ]{style="font-size:10%"}

~~~
tabulate varname [if] [in] [weight] [, options]
~~~

**Exercise:** use `tabulate` to explore the variable `procurement_type`


# Exploratory analysis: tabulate one way 

[ ]{style="font-size:10%"}

~~~
tabulate varname [if] [in] [weight] [, options]
~~~

**Exercise:** use `tabulate` to explore the variable `procurement_type`

```{s}
tabulate procurement_type
```


# Exploratory analysis: tabulate two way

[ ]{style="font-size:10%"}

~~~
tabulate varname1 varname2 [if] [in] [weight] [, options]
~~~

**Exercise:** use `tabulate` to explore the relationship between variables `procurement_type` and `process_type`


# Exploratory analysis: tabulate two way 

[ ]{style="font-size:10%"}

~~~
tabulate varname1 varname2 [if] [in] [weight] [, options]
~~~

**Exercise:** use `tabulate` to explore the relationship between variables `procurement_type` and `process_type`

```{s}
tabulate procurement_type process_type
```

# Exploratory analysis: `histogram`

[ ]{style="font-size:10%"}

~~~
histogram varname [if] [in] [weight] [, [continuous_opts | discrete_opts] options]
~~~

**Exercise:** use `histogram` to explore the distibrution of variable `month_init`

![](img/hist_month_init.png){width=40%}

# Exploratory analysis: `histogram`

[ ]{style="font-size:10%"}

~~~
histogram varname [if] [in] [weight] [, [continuous_opts | discrete_opts] options]
~~~

**Exercise:** use `histogram` to explore the distibrution of variable `month_init`

~~~
histogram month_init
~~~

![](img/hist_month_init.png){width=40%}

# Exploratory analysis: `histogram`

[ ]{style="font-size:10%"}

~~~
histogram varname [if] [in] [weight] [, [continuous_opts | discrete_opts] options]
~~~

~~~
histogram month_init, discrete
~~~

![](img/hist_month_init_discrete.png){width=40%}


# Exploratory analysis: `kdensity`

[ ]{style="font-size:10%"}

~~~
kdensity varname [if] [in] [weight] [, options]
~~~

~~~
kdensity bid_submission_period
~~~

![](img/density_bid_period.png){width=40%}


# Exploratory analysis: `kdensity`

[ ]{style="font-size:10%"}

~~~
kdensity varname [if] [in] [weight] [, options]
~~~

**Exercise:** use `kdensity` to explore the distribution of variable `bid_submission_period` only for processes where the period is shorter than 100 days

![](img/density_bid_period_restricted.png){width=30%}


# Exploratory analysis: `kdensity`

[ ]{style="font-size:10%"}

~~~
kdensity varname [if] [in] [weight] [, options]
~~~

**Exercise:** use `kdensity` to explore the distribution of variable `bid_submission_period` only for processes where the period is shorter than 100 days

~~~
kdensity bid_submission_period if bid_submission_period < 100
~~~

![](img/density_bid_period_restricted.png){width=30%}


# Exploratory analysis: `scatter`

[ ]{style="font-size:10%"}

~~~
scatter varlist [if] [in] [weight] [, options]
~~~

**Exercise:** use `scatter` to explore the relationship between variables `nr_nonlocal_bidders` and `nr_participants`

![](img/scatter.png){width=30%}


# Exploratory analysis: `scatter`

[ ]{style="font-size:10%"}

~~~
scatter varlist [if] [in] [weight] [, options]
~~~

**Exercise:** use `scatter` to explore the relationship between variables `nr_nonlocal_bidders` and `nr_participants`

~~~
scatter nr_nonlocal_bidders nr_participants
~~~

![](img/scatter.png){width=30%}


# Exploratory analysis: `graph bar`

[ ]{style="font-size:10%"}

~~~
graph bar  yvars [if] [in] [weight] [, options]
graph hbar yvars [if] [in] [weight] [, options]
~~~

**Exercise:** use `graph bar` to explore the variable `process_value`

![](img/process_value.png){width=30%}


# Exploratory analysis: `graph bar`


**Exercise:** use `graph bar` to explore the variable `process_value`

~~~
graph bar process_value
~~~

![](img/process_value.png){width=30%}

[Note that by default a bar graph displays the average value of a continuous variable.]{style="border-left: solid 5px lightgray;padding-left: 1em;display: block;margin-block-start: 1em;margin-block-end: 1em;margin-inline-start: 40px;margin-inline-end: 40px;font-size:80%"}


# Exploratory analysis: `graph bar`

Use the option `over()` to break down a bar graph into groups

~~~
graph bar process_value, over(procurement_type){width=40%}
~~~

![](img/process_value_proc_type.png){width=40%}


# Exploratory analysis: `graph bar`

Write `(stat)`, where `stat` represents the statistic to be calculated, before a variableâ€™s name to show a statistic other than the mean

~~~
graph bar (sum) process_value, over(procurement_type)
~~~

![](img/process_value_proc_type_total.png){width=40%}

# Exploratory analysis: `graph bar`

- Possible values of `stat` are: 
	- `sum` 
	- `count` 
	- `mean` 
	- `median`
	- `percent`


# Exploratory analysis: `graph bar`

[ ]{style="font-size:10%"}

~~~
graph bar  yvars [if] [in] [weight] [, options]
graph hbar yvars [if] [in] [weight] [, options]
~~~

**Exercise:** Create a horizontal bar graph that shows the number of processes with each procurement type

![](img/process_type_count.png){width=30%}

# Exploratory analysis: `graph bar`

[ ]{style="font-size:10%"}

~~~
graph bar  yvars [if] [in] [weight] [, options]
graph hbar yvars [if] [in] [weight] [, options]
~~~

**Exercise:** Create a horizontal bar graph that shows the number of processes with each procurement type

~~~
graph hbar (count) process_id, over(procurement_type)
~~~

![](img/process_type_count.png){width=30%}


# Exploratory analysis: `graph bar`

[ ]{style="font-size:10%"}

~~~
graph bar  yvars [if] [in] [weight] [, options]
graph hbar yvars [if] [in] [weight] [, options]
~~~

**Exercise:** Create a horizontal bar graph that shows the number of processes with each procurement type

~~~
graph hbar (count) process_id, over(procurement_type)
~~~

![](img/process_type_count.png){width=30%}


# Final analysis

- Once we have explored the data and understood what it is showing us, we will decide how to present our results
- Formatting outputs to make sure they include all relevant information can be very time-consuming
- We will only spend time formatting the outputs that we want to share with others


# Final analysis: setting the stage

**Exercise:**

**1.** Save the code that you wrote for exploratory analysis on the `Code/Analysis` folder. Call it `explore-process-data.do`.

**2.** Open a new script

**3.** Load the data that you want to use

**4.** Copy the code that created the graph you want to polish


# Final analysis: `graph bar`

[ ]{style="font-size:10%"}

~~~
Untitled do-file -----------------------------------

use "../DataWork/Data/Final/final_process.dta"

graph bar (count) process_id, over(procurement_type) 
~~~

# Final analysis: `graph bar`

To change the axis title, use `xtitle()` or `ytitle()`

~~~
graph bar (count) process_id, ///
	over(procurement_type) ///
	ytitle("Number of processes") <----
~~~

![](img/title.png){width=30%}


# Final analysis: `graph bar`

To add labels to the bars, use the option `blabel()`

~~~
graph bar (count) process_id, ///
	over(procurement_type) ///
	ytitle("Number of processes") ///
	blabel(total) <----
~~~

![](img/blabel.png){width=30%}


# Final analysis: `graph bar`

To change the background color, use the option `graphregion(color())`

~~~
graph bar (count) process_id, ///
	over(procurement_type) ///
	ytitle("Number of processes") ///
	blabel(total)  ///
	graphregion(color(white)) <----
~~~

![](img/grregion.png){width=30%}


# Final analysis: `set scheme`

An easier way to format graphs is to use pre-defined color schemes. Use the `set scheme` command to select a color scheme to use

~~~
ssc install blindschemes, replace
set scheme plotplain

graph bar (count) process_id, ///
	over(procurement_type) ///
	ytitle("Number of processes") ///
	blabel(total) 
~~~

![](img/plotplain.png){width=30%}


# Final analysis: `set scheme`

See [https://github.com/asjadnaqvi/Stata-schemes]() for more schemes

~~~
net install tsg_schemes, from("https://raw.githubusercontent.com/asjadnaqvi/Stata-schemes/main/schemes/") replace

set scheme white_tableau

graph bar (count) process_id, ///
	over(procurement_type) ///
	ytitle("Number of processes") ///
	blabel(total) 
~~~

![](img/white_tableau.png){width=20%}

# Final analysis: `graph bar`

**Exercise:** recreate the graph shown below.

[**Tip:** the color scheme is called `white_w3d`]{style="border-left: solid 5px lightgray;padding-left: 1em;display: block;margin-block-start: 1em;margin-block-end: 1em;margin-inline-start: 40px;margin-inline-end: 40px;font-size:80%"}

![](img/total_value_proctype_bar.png){width=20%}


# Final analysis: `graph bar`

**Exercise:** recreate the graph shown below

~~~
set scheme white_w3d

gr bar (sum) process_value, ///
	over(procurement_type) ///
	ytitle("Awarded value (Lev)") ///
	blabel(total) ///
	title("Total awarded value by process type")
~~~

![](img/total_value_proctype_bar.png){width=20%}


# Final analysis: exporting outputs

- Always save outputs in easily accessible format (such as PNG ang JPEG)
- Use self-explanatory names on your graphs
- Graph names and the names of the do-files that create them should be easy to match


# Final analysis: exporting graphs

[ ]{style="font-size:10%"}

~~~
graph export newfilename.suffix [, options]
~~~

**Exercise:** Export the graph you just created to the `Output` folder. Call it `process-value-by-procurement-type.png`.


# Final analysis: exporting graphs

[ ]{style="font-size:10%"}

~~~
graph export newfilename.suffix [, options]
~~~

**Exercise:** Export the graph you just created to the `Output` folder. Call it `process-value-by-procurement-type.png`.

~~~
graph export "../DataWork/Output/process-value-by-procurement-type.png", replace
~~~

# Final analysis: saving do-files

Final analysis scripts should be short and simple:

1. Load the data to be used
2. Create the graph or table to be exported
3. Export the graph or table

**Exercise:** Clean and save the do-file that created your graph to the folder `Code/Analysis`. Call it `process-value-by-procurement-type.do`


# Final analysis: saving do-files

`process-value-by-procurement-type.do`

~~~
set scheme white_w3d

use "../DataWork/Data/Final/final_process.dta"

gr bar (sum) process_value, ///
	over(procurement_type) ///
	ytitle("Awarded value (Lev)") ///
	blabel(total)  

graph export "../DataWork/Output/process-value-by-procurement-type.png", replace
~~~

# Final analysis: saving do-files

`processes-by-procurement-type.do`

~~~
set scheme white_w3d

use "../DataWork/Data/Final/final_process.dta"

gr bar (sum) process_id, ///
	over(procurement_type) ///
	ytitle("Number of processes") ///
	blabel(total)  

graph export "../DataWork/Output/processes-by-procurement-type.png", replace
~~~


# Final analysis: saving do-files

Analysis scripts should be this short for a few reasons:

**1.** In the future, we may only want to recreate one graph and not all of the graph we ever exported. In these cases, running a short script is much faster.

**2.** We want to be able to quickly find the piece of code that created an image. It is harder to read a long script and find the exact part of the code that created it than it is to connect a graph name to a do-file name.

In the next session, we will see how to recreate many figures without opening and running each do-file individually.


# Final analysis: `graph pie`

[ ]{style="font-size:10%"}

~~~
Slices as totals or percentages within over() categories
    graph pie varname [if] [in] [weight], over(varname) [options]

Slices as frequencies within over() categories
    graph pie [if] [in] [weight], over(varname) [options]
~~~


# Final analysis: `graph pie`

[ ]{style="font-size:10%"}

~~~
graph pie, over(procurement_type)
~~~

![](img/pie1.png){width=40%}


# Final analysis: `graph pie`

[ ]{style="font-size:10%"}

~~~
graph pie process_value, over(procurement_type)
~~~

![](img/pie2.png){width=40%}


# Final analysis: `graph pie`

[ ]{style="font-size:10%"}

~~~
gr pie process_value, over(procurement_type) plabel(_all percent)
~~~

![](img/pie3.png){width=40%}


# Final analysis: `graph pie`

[ ]{style="font-size:10%"}

~~~
gr pie process_value, over(procurement_type) plabel(_all percent) legend(position(12) cols(3))
~~~

![](img/pie4.png){width=40%}


# Final analysis: `graph pie`

[ ]{style="font-size:10%"}

~~~
gr pie process_value, over(procurement_type) plabel(_all percent) legend(position(4) cols(1))
~~~

![](img/pie5.png){width=40%}


# Final analysis: `graph pie`

[ ]{style="font-size:10%"}

~~~
gr pie process_value, over(procurement_type) plabel(_all percent, gap(10)) legend(on position(4) cols(1)) pie(2, explode)
~~~

![](img/pie6.png){width=40%}


# Two way graphs

- All the graphs weâ€™ve seen so far illustrate a single continuous variable, either by itself or over a categorical variable
- To show the relationship between two continuous variables, however, another type of Stata graph is used: the two-way graph

If we wanted to see how the total process value changes over time, for example, we could simple treat time as a categorical variable and create the following graph:


~~~
gr bar (sum) process_value, over(year_init) 
~~~

![](img/value_year.png){width=20%}

# Two way graphs

- However, time trends are usually displayed as line plots, which are in Stata created as a two-way graph
- In this two-way graph, we have two continuous variables: time and process value
- When we create two-way graphs, the most important thing to have in mind is that the data used for the graph needs to be tidy
- That is, each row in the dataset should represent one data point to be displayed in the graph â€“ we cannot group observations by calculating the mean or percent only in the graph, as we did for one way graphs
- In our example, in order to create a line plot of total process value by year, we need to start from a dataset where each row represents one year

# Two-way graphs

The way to create this type-year level dataset was discussed when we talked about construction:

```{s}
collapse (sum) process_value, by(year_init procurement_type)
```

This will create the following dataset:

```{s}
codebook
```

# Two-way graphs

Once the data is at the appropriate level of observation, we can create a two-way plot:

~~~
[graph] twoway plottype yvar xvar [if] [in] [, twoway_options]
~~~

~~~
graph twoway line process_value year_init
~~~

![](img/tw1.png){width=40%}


# Two-way graphs

One nice freature of two-way graphs is that we can add layers to a plot:

~~~
graph twoway ///
	(line process_value year_init if procurement_type == 1) /// First layer
	(line process_value year_init if procurement_type == 2) /// Second layer
	(line process_value year_init if procurement_type == 3) // Third layer
~~~

![](img/tw2.png){width=40%}


# Two-way graphs

- When a graph has multiple layers, there are two different types of options we can add: layer-specific options and general graph options
- General graph options are separated by a comma and added outside of the parentheses that define a layer:


graph twoway ///
	(line process_value year_init) /// First layer
	(scatter process_value year_init /// Second layer
		, mlabel(process_value)), /// Option to be applied to the second layer
	legend(off) // General graph option
~~~

![](img/tw4.png){width=40%}


# Two-way graphs

**Exercise:** add a title to the graph that was created previously

![](img/tw5.png){width=40%}

# Two-way graphs

**Exercise:** add a title to the graph that was created previously

~~~
graph twoway ///
	(line process_value year_init) /// First layer
	(scatter process_value year_init /// Second layer
		, mlabel(process_value)), /// Option to be applied to the second layer
	legend(off) /// General graph option
	title(Total process value by over (Lev)) <---- Title is a general graph option
	
gr export "img/tw5.png", replace
~~~

![](img/tw5.png){width=40%}


# Two-way graphs

- There is a large number of graph types that can be added as twoway graphs, including
  - Bar plots
  - Area plots 
  - Line plots
  - Dropline plots
- To see a complete list of two-way types and their layer-specific options, type `help twoway`

# Final analysis: exporting tables

- The `collapse` command that we just used to make sure our dataset was represeting year-level observations is also useful to create descriptive tables 
- The easiest way to export a descriptive table to Excel is to collapse the dataset, create the columns we want to present in our table, and export the entire dataset to Excel, as we did in session X

**Steps:**

1. Load the constructed process dataset
2. Collapse the data to display the desired statistics for each bid procedure
3. Label the columns using label variable
4. Export the resulting dataset to Excel

# Exporting tables

[ ]{style="font-size:10%"}

~~~
use "../DataWork/Data/Final/final_process.dta", clear

collapse (sum) value = process_value (percent) percent = process_value (count) volume = bid_id, by(bid_procedure)

label variable value     "Awarded value (Lev)"
label variable percent   "Percent of awarded value"
label variable volume    "Volume of processes"

export excel using "../DataWork/Output/Tables.xls", sheet("Bid procedure") sheetreplace firstrow(varlabels)
~~~


# Final analysis: exporting tables

**Exercise:** recreate the table shown below

![](img/table2.png){width=40%}

1. Open a new do-file
2. Load the constructed process dataset
3. Collapse the data to display the desired statistics for each bid procedure
4. Label the columns using label variable
5. Export the resulting dataset to Excel


# Final analysis: exporting tables

**Exercise:** recreate the table shown below

![](img/table2.png){width=40%}

~~~
use "../DataWork/Data/Final/final_process.dta", clear
    
collapse (sum)        value = process_value ///
		 (percent) percent = process_value ///
		 (count)   volume = bid_id, ///
		 by(bid_procedure)

label variable value     "Awarded value (Lev)"
label variable percent   "Percent of awarded value"
label variable volume    "Volume of processes"

export excel using "../DataWork/Output/Tables.xls", sheet("Bid procedure") sheetreplace firstrow(varlabels)
~~~
